name: Deploy to Staging

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Add SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 --decode > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Ensure Staging target directory exists
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          "mkdir -p '${{ secrets.TARGET_DIR_STAGING }}'"

      - name: Copy code to EC2 (Staging)
        run: |
          rsync -az -e "ssh -i ec2_key.pem -o StrictHostKeyChecking=no" ./ \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:'${{ secrets.TARGET_DIR_STAGING }}'

      - name: Copy .env.staging to EC2 (Staging)
        run: |
          echo "${{ secrets.ENV_FILE_STAGING }}" > .env.staging
          rsync -az -e "ssh -i ec2_key.pem -o StrictHostKeyChecking=no" .env.staging \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:'${{ secrets.TARGET_DIR_STAGING }}/.env.staging'
          rm .env.staging

      - name: Deploy on Staging EC2
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            cd '${{ secrets.TARGET_DIR_STAGING }}'

            # Optional: dynamically change port if needed (or skip this if using env vars instead)
            sed -i 's/"8000:8000"/"8001:8000"/' docker-compose.yml || true

            # Use the correct env file for staging
            docker-compose --env-file .env.staging -p staging_project down || true
            docker-compose --env-file .env.staging -p staging_project build
            docker-compose --env-file .env.staging -p staging_project up -d

            echo "âœ… Staging deployment completed successfully"
          EOF